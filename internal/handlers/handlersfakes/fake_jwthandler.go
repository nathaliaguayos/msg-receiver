// Code generated by counterfeiter. DO NOT EDIT.
package handlersfakes

import (
	"sync"

	"github.com/gin-gonic/gin"
	"github.com/nathaliaguayos/msg-receiver/internal/handlers"
)

type FakeJWTHandler struct {
	GenerateTokenStub        func(*gin.Context)
	generateTokenMutex       sync.RWMutex
	generateTokenArgsForCall []struct {
		arg1 *gin.Context
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJWTHandler) GenerateToken(arg1 *gin.Context) {
	fake.generateTokenMutex.Lock()
	fake.generateTokenArgsForCall = append(fake.generateTokenArgsForCall, struct {
		arg1 *gin.Context
	}{arg1})
	stub := fake.GenerateTokenStub
	fake.recordInvocation("GenerateToken", []interface{}{arg1})
	fake.generateTokenMutex.Unlock()
	if stub != nil {
		fake.GenerateTokenStub(arg1)
	}
}

func (fake *FakeJWTHandler) GenerateTokenCallCount() int {
	fake.generateTokenMutex.RLock()
	defer fake.generateTokenMutex.RUnlock()
	return len(fake.generateTokenArgsForCall)
}

func (fake *FakeJWTHandler) GenerateTokenCalls(stub func(*gin.Context)) {
	fake.generateTokenMutex.Lock()
	defer fake.generateTokenMutex.Unlock()
	fake.GenerateTokenStub = stub
}

func (fake *FakeJWTHandler) GenerateTokenArgsForCall(i int) *gin.Context {
	fake.generateTokenMutex.RLock()
	defer fake.generateTokenMutex.RUnlock()
	argsForCall := fake.generateTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeJWTHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateTokenMutex.RLock()
	defer fake.generateTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeJWTHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.JWTHandler = new(FakeJWTHandler)
